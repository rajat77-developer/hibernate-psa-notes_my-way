EmployeeRepository.java
==========================

package com.demo_crud.repository;

import java.util.List;
import java.util.Optional;

import org.springframework.data.repository.CrudRepository;

import com.demo_crud.entity.Employee;

public interface EmployeeRepository extends CrudRepository<Employee, Long> {

    
	Optional<Employee> findByEmailId(String email);
    // we have used "Optional " to avoid null pointer exception.
   Optional<Employee> findByMobile(String mobile);
   
   boolean existsByEmailId(String email);
   // to check the data available or not in the database.
   
   boolean existsByMobile(String mobile);
   // to check the mobile is already is present or not .
   
   long countByEmailId(String email);
   //count the number of email for a particular queue and it is an long value so we use long.
   
   List<Employee> findByFirstNameContaining(String keyword);
   
   //to find records by using letters, here we use  "List" keyword because there are list of records not single one.

   
   List<Employee> findByFirstNameStartingWith(String keyword);
   
   
   List<Employee> findByFirstNameEndingWith(String keyword);
      
}


======================================================================================================================================
DemoCrudApplicationTests.java
-----------------------------

package com.demo_crud;

import java.util.List;
import java.util.Optional;

import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;

import com.demo_crud.entity.Employee;
import com.demo_crud.repository.EmployeeRepository;

@SpringBootTest
class DemoCrudApplicationTests {

	
	@Autowired
	private EmployeeRepository  employeeRepository;
	
	@Test
	void saveEmployee() {
		
		System.out.println(employeeRepository);
	}
	
	@Test
	void saveRecord(){
		
		Employee emp =new Employee();
		emp.setFirstName("adam");
		emp.setLastName("a");
		emp.setEmailId("adam@gmail.com");
		emp.setMobile("9731050754");
		employeeRepository.save(emp);
		
	}
	@Test
	void deleteEmployee() {
		
		employeeRepository.deleteById(8L);
			
	}
	
	@Test
	void getEmployeeById(){
		
		Optional<Employee> val=employeeRepository.findById(7L);
		if(val.isPresent()) {
			
			Employee emp =val.get();
			
			System.out.println(emp.getId());
			System.out.println(emp.getFirstName());
			System.out.println(emp.getLastName());
			System.out.println(emp.getEmailId());
			System.out.println(emp.getMobile());
			
		}else {
			System.out.println("Employee is not found in the database");
		}
		
	}
	
 @Test
  
   void getAllEmployees(){
 
	 //to find all data from database we use findAll() method 
	 
	Iterable<Employee> itr= employeeRepository.findAll();
	
	for(Employee emp:itr) {
		
		System.out.println(emp.getId());
		System.out.println(emp.getFirstName());
		System.out.println(emp.getLastName());
		System.out.println(emp.getEmailId());
		System.out.println(emp.getMobile());
			
	}
	
  }	
	
 @Test
 
 void countRecords(){
	 //count the number of data in your database by using count() method.
	 long count = employeeRepository.count();
	 System.out.println(count);
	 
 	}
 @Test
 void findEmployeeByEmail() {
	 
	 Optional<Employee> opEmp = employeeRepository.findByEmailId("adam@gmail.com"); 
	 
	 if(opEmp.isPresent()) {
		 
		 Employee emp= opEmp.get();
		 System.out.println(emp.getId());
		 System.out.println(emp.getFirstName());
		 System.out.println(emp.getLastName());
		 System.out.println(emp.getEmailId());
		 System.out.println(emp.getMobile());
	 }
		 
	 }
@Test
void findEmployeeByMobile() {
Optional<Employee> opEmp = employeeRepository.findByMobile("9745898554");
if(opEmp.isPresent()) {
	 
	 Employee emp= opEmp.get();
	 System.out.println(emp.getId());
	 System.out.println(emp.getFirstName());
	 System.out.println(emp.getLastName());
	 System.out.println(emp.getEmailId());
	 System.out.println(emp.getMobile());
  }  
}

@Test
void checkEmployeeByEmail() {
	
	boolean val= employeeRepository.existsByEmailId("adam@gmail.com");
	System.out.println(val);
	}
@Test
void checkEmployeeByMobile() {
	
	boolean val=employeeRepository.existsByMobile("8999933399");
	System.out.println(val);
}

@Test
void countByEmailId() {
	long val=employeeRepository.countByEmailId("adam@gmail.com");
	System.out.println(val);
}

@Test
void findNamesByKeywords() {
	List<Employee> employees=employeeRepository.findByFirstNameContaining("m");
	for(Employee emp:employees) {
		System.out.println(emp.getId());
		System.out.println(emp.getFirstName());
		System.out.println(emp.getLastName());
	    System.out.println(emp.getEmailId());
		System.out.println(emp.getMobile());
		
	}
}

@Test
void findNamesByKeywordsStartingWith() {
	
	
	List<Employee> employees=employeeRepository.findByFirstNameStartingWith("a");
	
	for(Employee emp:employees) {
		
		System.out.println(emp.getId());
		System.out.println(emp.getFirstName());
		System.out.println(emp.getLastName());
	    System.out.println(emp.getEmailId());
		System.out.println(emp.getMobile());
	
	}  	
}

@Test
void findNamesByKeywordsLastnameWith() {
	
	
	List<Employee> employees=employeeRepository.findByFirstNameEndingWith("u");
	
	for(Employee emp:employees) {
		
		System.out.println(emp.getId());
		System.out.println(emp.getFirstName());
		System.out.println(emp.getLastName());
	    System.out.println(emp.getEmailId());
		System.out.println(emp.getMobile());
		
	      }  
	
    }
 }
======================================================================================
Employee.java
=============
package com.demo_crud.entity;

import jakarta.annotation.Generated;
import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.Table;

@Entity
@Table(name="employees")
public class Employee {
@Id
@GeneratedValue(strategy = GenerationType.IDENTITY)
private long id;

@Column(name = "first_name", nullable = false, length = 45)
private String firstName;

@Column(name = "last_name", nullable = false, length = 45)
private String lastName;

@Column(name = "email_id", nullable = false, length = 256, unique = true)
private String emailId;

@Column(name="mobile", nullable = false, unique = true)
private String mobile;

public long getId() {
	return id;
}
public void setId(long id) {
	this.id = id;
}
public String getFirstName() {
	return firstName;
}
public void setFirstName(String firstName) {
	this.firstName = firstName;
}
public String getLastName() {
	return lastName;
}
public void setLastName(String lastName) {
	this.lastName = lastName;
}
public String getEmailId() {
	return emailId;
}
public void setEmailId(String emailId) {
	this.emailId = emailId;
}
public String getMobile() {
	return mobile;
}
public void setMobile(String mobile) {
	this.mobile = mobile;
  }
}
====================================================================================================
application.properties
======================
spring.application.name=demo-crud


spring.datasource.url=jdbc:mysql://localhost:3306/aprildb

spring.datasource.username=root
spring.datasource.password=test


#this will drop existing table and create a new one every time we start the project.
#spring.jpa.hibernate.ddl-auto=create

#It will create new table if table does not exist and if table is already present then will use the same table
spring.jpa.hibernate.ddl-auto=update



================================================================================================================












/*
===========================================================================================

what GET method do ?

It will convert Optional method to Entity method.
=============================================================================================

*/


